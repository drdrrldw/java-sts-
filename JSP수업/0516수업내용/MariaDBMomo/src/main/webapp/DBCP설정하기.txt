1. 동적 웹 프로젝트 생성
2. Tern 프로젝트로 컨버트
3. maven 프로젝트로 컨버트

4. DBCP를 설정해보자~!
	4-1. META-INF밑에 Context.xml 을 만들자
-----------------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<Context>
	<Resource 
	name="jdbc/mariaDB" 
	auth="Container"
	type="javax.sql.DataSource" 
	maxTotal="100" 
	maxIdle="30"
	maxWaitMillis="10000" 
	username="jspuser" 
	password="123456"
	driverClassName="com.mariadb.jdbc.Driver"
	url="jdbc:mariaDB://localhost:3306/jspdb" />
</Context>

-----------------------------------------------------------------------



	4-2. WEB-INF/web.xml 에 리소스를 추가한다.
-----------------------------------------------------------------------
	<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  <display-name>DBCPEx</display-name>
  
  	<!-- DBCP 설정 내용 Context.xml을 참조하겠다.  시작 -->
   <resource-ref>
      <description>DB Connection</description>
      <res-ref-name>jdbc/mariaDB</res-ref-name>
      <res-type>javax.sql.DataSource</res-type>
      <res-auth>Container</res-auth>
  </resource-ref>
    <!-- DBCP 설정 내용 Context.xml을 참조하겠다.  종료 -->
  
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
</web-app>
-----------------------------------------------------------------------



	4-3. JSP파일을 만들어 되는지 테스트해보자
-----------------------------------------------------------------------
	DBCPEx.jsp
-----------------------------------------------------------------------
	<%@page import="java.sql.Connection"%>
	<%@page import="javax.sql.DataSource"%>
	<%@page import="javax.naming.InitialContext"%>
	<%@page import="javax.naming.Context"%>
	<%@ page language="java" contentType="text/html; charset=UTF-8"
	    pageEncoding="UTF-8"%>
	<!DOCTYPE html>
	<html>
	<head>
	<meta charset="UTF-8">
	<title>Insert title here</title>
	</head>
	<body>
		<%
			Context initContext = new InitialContext();
			Context envContext  = (Context)initContext.lookup("java:/comp/env");
			DataSource ds = (DataSource)envContext.lookup("jdbc/mariaDB");
			Connection conn = ds.getConnection();
			
			out.println("연결 성공 : " + conn);
			conn.close();
		%>
	</body>
	</html>	
-----------------------------------------------------------------------

	4-4. 연결하고 닫는 자바코드를 클래스로 빼내보자!!
-----------------------------------------------------------------------
	kr.human.jdbc/JDBCUtil.java
-----------------------------------------------------------------------
			
			package kr.human.jdbc;
		
		import java.sql.Connection;
		import java.sql.ResultSet;
		import java.sql.SQLException;
		import java.sql.Statement;
		
		import javax.naming.Context;
		import javax.naming.InitialContext;
		import javax.naming.NamingException;
		import javax.sql.DataSource;
		
		public class JDBCUtil {
				// DB Pool로 부터 커넥션을 얻어온다.
			public static Connection getConnection() {
				Connection conn = null;
				try {
					Context initContext = new InitialContext();
					Context envContext  = (Context)initContext.lookup("java:/comp/env");
					DataSource ds = (DataSource)envContext.lookup("jdbc/mariaDB");
					
					conn = ds.getConnection();
				} catch (NamingException e) {
					e.printStackTrace();
				} catch (SQLException e) {
					e.printStackTrace();
				}
				
				return conn;
			}
			// 닫는 메서드 3개
			
			public static void close(Connection conn) {
				try {
					if(conn!=null) conn.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			
			public static void close(Statement stmt) {
				try {
					if(stmt!=null) stmt.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			
			public static void close(ResultSet rs) {
				try {
					if(rs!=null) rs.close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
			
			// 롤백 메서드 1개
			public static void rollback(Connection conn) {
				try {
					if(conn!=null) conn.rollback();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}
			
	
	
-----------------------------------------------------------------------
	4-5. JSP파일을 만들어 테스트해보자.
-----------------------------------------------------------------------
	DBCPTest2.jsp
-----------------------------------------------------------------------
			<%@page import="kr.human.jdbc.JDBCUtil"%>
		<%@page import="java.sql.PreparedStatement"%>
		<%@page import="java.sql.ResultSet"%>
		<%@page import="java.sql.Statement"%>
		<%@page import="java.sql.Connection"%>
		<%@ page language="java" contentType="text/html; charset=UTF-8"
		    pageEncoding="UTF-8"%>
		<!DOCTYPE html>
		<html>
		<head>
		<meta charset="UTF-8">
		<title>Insert title here</title>
		</head>
		<body>
			<%
				Connection conn = null;
				Statement stmt = null;
				PreparedStatement pstmt = null;
				ResultSet rs = null;
			
				try{
					// 1.연결 얻기
					conn = JDBCUtil.getConnection();
					
					// 트랜젝션 시작(자동커밋 취소)
					conn.setAutoCommit(false);
					
			// ---------------------------------------------------------------------------
					// 2. 사용(이 부분만 변경된다.) 
					
					out.println("연결 성공 : " + conn + "<br>");
					
			// ---------------------------------------------------------------------------
					// 에러가 없으면  DB에 적용해라.
					conn.commit();			
				}catch(Exception e){
					// 에러가 있으면 모든 명령을 취소한다.
					JDBCUtil.rollback(conn);
					e.printStackTrace();
				}finally{
					// 3. 닫기
					JDBCUtil.close(rs);
					JDBCUtil.close(stmt);
					JDBCUtil.close(pstmt);
					JDBCUtil.close(conn);
					
					
				}
			
			
			%>
		</body>
		</html>
-----------------------------------------------------------------------

